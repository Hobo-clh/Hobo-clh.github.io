<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java8新特性：Lambda表达式</title>
      <link href="/2020/05/05/java8%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9ALambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/05/05/java8%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9ALambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Lambda表达式"><a href="#什么是Lambda表达式" class="headerlink" title="什么是Lambda表达式"></a>什么是Lambda表达式</h2><p>百度说 “Lambda 表达式”是一个复匿名函数，它可以包含表达式和语句，制并且可用于创建委托或表达式树类型。</p><h2 id="Lambda表达式的优缺点"><a href="#Lambda表达式的优缺点" class="headerlink" title="Lambda表达式的优缺点"></a>Lambda表达式的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>代码简洁，开发迅速</li><li>方便函数式编程</li><li>非常容易进行并行计算</li><li>java引入lambda，改善了集合操作（引入Stream API）</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>代码可读性变差</li><li>使得语言学习曲线陡峭，学习难度提升</li><li>性能方面，在非并行计算中，很多计算未必有传统的for性能要高</li><li>不容易进行调试</li></ol><h2 id="体验一下Lambda表达式的便捷"><a href="#体验一下Lambda表达式的便捷" class="headerlink" title="体验一下Lambda表达式的便捷"></a>体验一下Lambda表达式的便捷</h2><h3 id="无优化"><a href="#无优化" class="headerlink" title="无优化"></a>无优化</h3><p><code>需求：获取当前公司中员工年龄大于35岁的员工信息</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = Arrays.asList(</span><br><span class="line">        <span class="comment">//id、name、age、salary</span></span><br><span class="line">        <span class="keyword">new</span> Employee(<span class="number">1</span>, <span class="string">"张三"</span>, <span class="number">35</span>, <span class="number">9999.9</span>),</span><br><span class="line">        <span class="keyword">new</span> Employee(<span class="number">2</span>, <span class="string">"李四"</span>, <span class="number">18</span>, <span class="number">18888.0</span>),</span><br><span class="line">        <span class="keyword">new</span> Employee(<span class="number">3</span>, <span class="string">"王五"</span>, <span class="number">44</span>, <span class="number">14444.0</span>),</span><br><span class="line">        <span class="keyword">new</span> Employee(<span class="number">4</span>, <span class="string">"赵六"</span>, <span class="number">23</span>, <span class="number">2333.0</span>),</span><br><span class="line">        <span class="keyword">new</span> Employee(<span class="number">5</span>, <span class="string">"钱七"</span>, <span class="number">47</span>, <span class="number">14244.0</span>),</span><br><span class="line">        <span class="keyword">new</span> Employee(<span class="number">6</span>, <span class="string">"陈八"</span>, <span class="number">34</span>, <span class="number">7444.0</span>),</span><br><span class="line">        <span class="keyword">new</span> Employee(<span class="number">7</span>, <span class="string">"曹九"</span>, <span class="number">39</span>, <span class="number">944.0</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>一般的做法是,直接写个过滤方法 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Employee&gt; filter = filterEmployee(employees);</span><br><span class="line">    <span class="keyword">for</span> (Employee employee : filter) &#123;</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">filterEmployee</span><span class="params">(List&lt;Employee&gt; list)</span> </span>&#123;</span><br><span class="line">    List&lt;Employee&gt; emps = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Employee emp : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (emp.getAge() &gt; <span class="number">35</span>) &#123;</span><br><span class="line">            emps.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> emps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果又增加了需求,又要重新写一个方法，然后直接cope上面的只改一句话，这样代码冗长，繁琐<br><code>新增需求：获取当前公司中员工工资大于5000的员工信息</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">filterEmployee2</span><span class="params">(List&lt;Employee&gt; list)</span> </span>&#123;</span><br><span class="line">    List&lt;Employee&gt; emps = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Employee emp : list) &#123;</span><br><span class="line">        <span class="comment">//只需改变一句话，其他完全一样，代码冗长</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getSalary() &gt; <span class="number">5000.0</span>) &#123;</span><br><span class="line">            emps.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> emps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化方式一：引入策略设计模式"><a href="#优化方式一：引入策略设计模式" class="headerlink" title="优化方式一：引入策略设计模式"></a>优化方式一：引入策略设计模式</h3><p>新建一个接口，和一个实现该接口的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyPredicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------分割线----------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterEmpByAge</span> <span class="keyword">implements</span> <span class="title">MyPredicate</span>&lt;<span class="title">Employee</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employee.getAge()&gt;<span class="number">35</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后新建方法，如果mp.test(emp)为true，则执行emp添加到新数组，完成过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyPredicate&lt;Employee&gt; mp = <span class="keyword">new</span> FilterEmpByAge();</span><br><span class="line">    List&lt;Employee&gt; employees = filterEmployee(<span class="keyword">this</span>.employees, mp);</span><br><span class="line">    <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">filterEmployee</span><span class="params">(List&lt;Employee&gt; list, MyPredicate&lt;Employee&gt; mp)</span> </span>&#123;</span><br><span class="line">    List&lt;Employee&gt; emps = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Employee emp : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mp.test(emp)) &#123;</span><br><span class="line">            emps.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> emps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现了新需求，只需要再写一个实现此接口的类，多多少少还是有点繁琐</p><h3 id="优化方式二：匿名内部类"><a href="#优化方式二：匿名内部类" class="headerlink" title="优化方式二：匿名内部类"></a>优化方式二：匿名内部类</h3><p>不用写一个实现此接口的类，直接通过匿名内部类的方式实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyPredicate&lt;Employee&gt; mp = <span class="keyword">new</span> MyPredicate&lt;Employee&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> employee.getSalary()&gt;=<span class="number">9797</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    List&lt;Employee&gt; employees = filterEmployee(<span class="keyword">this</span>.employees, mp);</span><br><span class="line">    <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现匿名内部类多多少少还是有点繁琐，毕竟有效代码就一句话<br> <code>return employee.getSalary()&gt;=9797;</code></p><h3 id="优化方式三：lambda表达式"><a href="#优化方式三：lambda表达式" class="headerlink" title="优化方式三：lambda表达式"></a>优化方式三：lambda表达式</h3><p> 使用lambda表达式如下，做到了正在的简洁，只需要把最关键的东西写出来就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Employee&gt; list = filterEmployee(employees, (e) -&gt; e.getSalary() &lt;= <span class="number">5000</span>);</span><br><span class="line">    <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这之后还有一种方式，那就是Stream API</p><h3 id="优化方式四：Stream-API"><a href="#优化方式四：Stream-API" class="headerlink" title="优化方式四：Stream API"></a>优化方式四：Stream API</h3><p>这个极简，连filterEmployee方法都不用写就完成了过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span></span>&#123;</span><br><span class="line">    employees.stream()</span><br><span class="line">            .filter(e -&gt; e.getSalary() &gt;= <span class="number">5000</span>) <span class="comment">//过滤</span></span><br><span class="line">            .limit(<span class="number">1</span>) <span class="comment">//限制1个</span></span><br><span class="line">            .forEach(System.out::println); <span class="comment">//遍历</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lambda表达式的基本语法"><a href="#Lambda表达式的基本语法" class="headerlink" title="Lambda表达式的基本语法"></a>Lambda表达式的基本语法</h2><p>体验到了Lambda表达式的便捷后，就来康康它的基本语法吧~</p><pre><code>一、Lambda 表达式的基础语法：          &quot;-&gt;&quot; 箭头操作符 或 Lambda 操作符              左侧：Lambda 表达式的参数列表              右侧：Lambda 表达式所需执行的功能，即Lambda体          语法格式一：无参数，无返回值              () -&gt; System.out.println(&quot;Hello World&quot;);          语法格式二：有一个参数，并且无返回值              (e) -&gt; System.out.println(e);              小括号可以不写              e -&gt; System.out.println(e);          语法格式三：有两个以上的参数，有返回值，并且Lambda 体中有多条语句              如果只有一条语句，return和{}都可以省略不写（通用）          语法格式四：Lambda 表达式的参数类型可以省略不写              因为JVM编译器可以通过上下文推断出参数数据类型，叫做”类型推断“         上联：左右遇一括号省         下联：左侧推断类型省         横批：能省就省二、Lambda 表达式需要”函数式接口“的支持   函数式接口：接口中只有一个抽象方法的接口，成为函数式接口      可以在接口上使用注解@FunctionalInterface 修饰，检查接口是否为函数式接口</code></pre><h3 id="内置的四大核心函数式接口"><a href="#内置的四大核心函数式接口" class="headerlink" title="内置的四大核心函数式接口"></a>内置的四大核心函数式接口</h3><p>Consumer<T> ：消费型接口<br>   void accept(T t);</T></p><p>   Supplier<T> ：供给型接口<br>        T get();</T></p><p>   Function&lt;T, R&gt; ：函数型接口<br>        R apply(T t);</p><p>   Predicate<T> ：断言型接口<br>        boolean test(T t);</T></p><h2 id="Lambda表达式中的引用"><a href="#Lambda表达式中的引用" class="headerlink" title="Lambda表达式中的引用"></a>Lambda表达式中的引用</h2><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>方法引用主要有三种语法格式：<br><code>对象::实例方法名</code><br> <code>类::静态方法名</code><br> <code>类::实例方法名</code><br>注意：Lambda 体中调用方法的<strong>参数列表</strong>与<strong>返回值类型</strong>，要与函数式接口中抽象方法的<strong>函数列表</strong>和<strong>返回值类型保持一致</strong>！</p><h4 id="对象-实例方法名"><a href="#对象-实例方法名" class="headerlink" title="对象::实例方法名"></a>对象::实例方法名</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 例子1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//正常的Lambda表达式</span></span><br><span class="line">       Consumer&lt;String&gt; con = (x) -&gt; System.out.println(x);</span><br><span class="line">       <span class="comment">//方法引用</span></span><br><span class="line">       <span class="comment">//println为out对象的一个实例方法</span></span><br><span class="line">       PrintStream ps = System.out;</span><br><span class="line">       Consumer&lt;String&gt; con2 = ps::println;</span><br><span class="line">       Consumer&lt;String&gt; con3 = System.out::println;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 例子2</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Employee emp = <span class="keyword">new</span> Employee(<span class="number">1</span>,<span class="string">"niu"</span>,<span class="number">33</span>,<span class="number">49999.0</span>);</span><br><span class="line">       <span class="comment">//正常的Lambda表达式</span></span><br><span class="line">       Supplier&lt;String&gt; sup = () -&gt; emp.getName();</span><br><span class="line">       System.out.println(sup.get());</span><br><span class="line">       <span class="comment">//方法引用</span></span><br><span class="line">       <span class="comment">//getSalary为emp对象的一个实例方法</span></span><br><span class="line">       Supplier&lt;Double&gt; sup2 = emp::getSalary;</span><br><span class="line">       System.out.println(sup2. get());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="类-静态方法名"><a href="#类-静态方法名" class="headerlink" title="类::静态方法名"></a>类::静态方法名</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Comparator&lt;Integer&gt; com = (x,y) -&gt; Integer.compare(x,y);</span><br><span class="line"><span class="comment">//compare是Integer类的静态方法</span></span><br><span class="line">       Comparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="类-实例方法名"><a href="#类-实例方法名" class="headerlink" title="类::实例方法名"></a>类::实例方法名</h4><p>这个要注意，只有当<strong>第一个参数是实例方法的调用者</strong>，<strong>第二个参数是实例方法的参数</strong>时 才能这样使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 类::实例方法名</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 第一个参数是实例方法的调用者，第二个参数是实例方法的参数时 即可这样使用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">       BiPredicate&lt;String,String&gt; bp = (x,y) -&gt; x.equals(y);</span><br><span class="line">       <span class="comment">//x是equals方法调用者，y为equals方法参数</span></span><br><span class="line">       BiPredicate&lt;String,String&gt; bp2 = String::equals;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="另外，还有构造器引用和数组引用"><a href="#另外，还有构造器引用和数组引用" class="headerlink" title="另外，还有构造器引用和数组引用"></a>另外，还有构造器引用和数组引用</h3><p>如果接口中方法有参数，则调用的构造器参数和接口方法中的参数一致<br>如果没有参数，则调用的无参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构造器引用</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 如果接口中方法有参数，则调用的构造器参数和接口方法中的参数一致</span></span><br><span class="line"><span class="comment">    * 如果没有参数，则调用的无参构造器</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * 例子1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//接口的方法中无参数，调用的无参构造器</span></span><br><span class="line">       Supplier&lt;Employee&gt; sup = ()-&gt; <span class="keyword">new</span> Employee();</span><br><span class="line">       Supplier&lt;Employee&gt; sup1 = Employee::<span class="keyword">new</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 例子2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//接口的方法中有一个参数，调用的构造器也有一个参数</span></span><br><span class="line">       Function&lt;Integer,Employee&gt; function = Employee::<span class="keyword">new</span>;</span><br><span class="line">       Employee employee = function.apply(<span class="number">1</span>);</span><br><span class="line">       System.out.println(employee);</span><br><span class="line">       <span class="comment">//结果 Employee&#123;id=1, name='null', age=null, salary=null&#125;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 数组引用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Function&lt;Integer,String[]&gt; fun = (x) -&gt; <span class="keyword">new</span> String[x];</span><br><span class="line"></span><br><span class="line">       Function&lt;Integer,String[]&gt; fun2 = String[]::<span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">       String[] apply = fun2.apply(<span class="number">2</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习使我快乐</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap在JDK1.7和1.8的区别</title>
      <link href="/2020/05/04/HashMap%E5%9C%A8JDK1-7%E5%92%8C1-8%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/05/04/HashMap%E5%9C%A8JDK1-7%E5%92%8C1-8%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>JDK1.7中，底层使用数组+链表<br>JDK1.8中，底层使用数组+链表+红黑树</p><h2 id="共同点："><a href="#共同点：" class="headerlink" title="共同点："></a>共同点：</h2><h3 id="容量（capacity）：HashMap中数组的长度"><a href="#容量（capacity）：HashMap中数组的长度" class="headerlink" title="容量（capacity）：HashMap中数组的长度"></a>容量（capacity）：HashMap中数组的长度</h3><ol><li>容量范围：必须是2的幂 &amp; &lt;最大容量（2的30次方）</li><li>初始容量 = 哈希表创建时的容量</li><li>默认容量 = 16 = 1&lt;&lt;4 = 00001中的1向左移4位 = 10000 = 十进制的2^4=16<br><code>static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;</code></li><li>最大容量 = 2的30次方（若传入的容量过大，将被最大值替换）<br><code>static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</code></li></ol><h3 id="加载因子-Load-factor-：HashMap在其容量自动增加前可达到多满的一种尺度"><a href="#加载因子-Load-factor-：HashMap在其容量自动增加前可达到多满的一种尺度" class="headerlink" title="加载因子(Load factor)：HashMap在其容量自动增加前可达到多满的一种尺度"></a>加载因子(Load factor)：HashMap在其容量自动增加前可达到多满的一种尺度</h3><ol><li>加载因子越大、填满的元素越多 = 空间利用率高、但冲突的机会加大、查找效率变低（因为链表变长了）</li><li>加载因子越小、填满的元素越少 = 空间利用率小、冲突的机会减小、查找效率高（链表不长）</li><li>默认加载因子 = 0.75<br><code>static final float DEFAULT_LOAD_FACTOR = 0.75f;</code></li></ol><h3 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h3><ol><li><p>扩容时resize(2 * table.length)，扩容到原数组长度的2倍。</p></li><li><p>若key == null，则hash(key) = 0，则将该键-值 存放到数组table 中的第1个位置，即table [0]</p></li></ol><h2 id="异同点"><a href="#异同点" class="headerlink" title="异同点"></a>异同点</h2><h3 id="JDK1-7中"><a href="#JDK1-7中" class="headerlink" title="JDK1.7中"></a>JDK1.7中</h3><ul><li><p>使用一个<strong>Entry数组</strong>来存储数据,用key的hashcode取模来决定key会被放到数组里的位置,如果hashcode相同,或者hashcode取模后的结果相同(hash collision),那么这些key会被定位到Entry数组的同一个格子里,这些key会形成一个链表。</p></li><li><p>在hashcode特别差的情况下,比方说所有key的hashcode都相同,这个链表可能会很长,那么put/get操作都可能需要遍历这个链表</p></li><li><p>,也就是说时间复杂度在最差情况下会退化到<strong>O(n)</strong>。</p></li><li><p>发生hash冲突时，新元素插入到链表头中，即新元素总是添加到数组中，就元素移动到链表中。</p></li><li><p>在扩容resize（）过程中，采用单链表的<strong>头插法</strong>，在将旧数组上的数据 转移到 新数组上时，转移操作 = 按旧链表的正序遍历链表、在新链表的头部依次插入，即在转移数据、扩容后，容易出现链表逆序的情况 。</p></li><li><p>HashMap线程不安全的一个重要原因就是：多线程下resize()容易出现死循环，此时若（多线程）并发执行 put（）操作，一旦出现扩容情况，则 容易出现 环形链表，从而在get数据、遍历链表时 <strong>形成死循环（Infinite Loop），即 死锁的状态 。</strong></p><h3 id="JDK1-8中"><a href="#JDK1-8中" class="headerlink" title="JDK1.8中"></a>JDK1.8中</h3></li><li><p>使用一个<strong>Node数组</strong>来存储数据,但这个Node可能是链表结构,也可能是红黑树结构</p></li><li><p>如果插入的key的hashcode相同,那么这些key也会被定位到Node数组的同一个格子里。</p></li><li><p>如果同一个格子里的key不超过8个,使用链表结构存储。</p></li><li><p>如果超过了8个,那么会调用treeifyBin函数,将链表转换为红黑树。</p></li><li><p>那么即使hashcode完全相同,由于红黑树的特点,查找某个特定元素,也只需要O(log n)的开销</p></li><li><p>也就是说put/get的操作的时间复杂度最差只有<strong>O(log n)</strong></p></li><li><p>由于 JDK 1.8 转移数据操作 = 按旧链表的正序遍历链表、<strong>在新链表的尾部依次插入（尾插法）</strong>，所以不会出现链表 逆序、倒置的情况，故不容易出现环形链表的情况 ，但jdk1.8仍是线程不安全的，因为没有加同步锁保护。</p></li><li><p>发生hash冲突后，会优先判断该节点的数据结构式是红黑树还是链表，如果是红黑树，则在红黑树中插入数据，如果是链表，则将数据插入到链表的尾部并判断链表长度是否大于8，如果大于8要转成红黑树，另一还要判断数组长度是否超过阀值</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写ArrayList（仿照源码）</title>
      <link href="/2020/04/29/%E6%89%8B%E5%86%99ArrayList/"/>
      <url>/2020/04/29/%E6%89%8B%E5%86%99ArrayList/</url>
      
        <content type="html"><![CDATA[<h2 id="ArrayList简述"><a href="#ArrayList简述" class="headerlink" title="ArrayList简述"></a>ArrayList简述</h2><p>ArrayList底层使用的是<strong>数组</strong>，相对于LinkeList来说查询<strong>修改快，增删慢</strong>，适用于查询较多的场景。<strong>非线程安全。</strong></p><ol><li>List 接口： List是Collection的子接口，它是一个元素有序(按照插入的顺序维护元素顺序)、可重复、可以为null的集合</li><li>AbstractList 类： List接口的骨架实现类，最小化实现了List接口所需要实现的工作量</li><li>实现了Cloneable接口，即覆盖了函数clone()，能克隆;</li><li>实现了Cloneable接口，实现了该接口标示了类可以被序列化和反序列化</li><li>RandomAccess 接口，实现了该接口的类支持快速随机访问</li></ol><h2 id="手写实现"><a href="#手写实现" class="headerlink" title="手写实现"></a>手写实现</h2><h3 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//初始容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//初始的数组（空数组）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">    <span class="comment">//底层数组</span></span><br><span class="line">    Object[] elementData;</span><br><span class="line">    <span class="comment">//包含的元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><h3 id="增删改查方法"><a href="#增删改查方法" class="headerlink" title="增删改查方法"></a>增删改查方法</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//是否对数组进行扩容</span></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//此时数组长度已扩容或长度够不需要扩容</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确保内部容量</span></span><br><span class="line"><span class="comment">     * 判断数组的容量，小于minCapacity就进行扩容1.5倍</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minCapacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果是空数组则 minCapacity = 10</span></span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//原数组容量</span></span><br><span class="line">            <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">            <span class="comment">//扩容为之前的1.5倍（扩容因子为1.5）</span></span><br><span class="line">            <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//如果新容量 小于 最小容量，则新容量 = 最小容量</span></span><br><span class="line">            <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                newCapacity = minCapacity;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//ArrayList最大数组长度为Integer.MAX_VALUE - 8</span></span><br><span class="line">            <span class="keyword">if</span> (newCapacity &gt; (Integer.MAX_VALUE - <span class="number">8</span>)) &#123;</span><br><span class="line">                <span class="comment">// overflow</span></span><br><span class="line">                <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">                &#125;</span><br><span class="line">                newCapacity = (minCapacity &gt; Integer.MAX_VALUE - <span class="number">8</span>) ? Integer.MAX_VALUE : Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//创建新长度的数组，并将原数组数据赋值给新数组</span></span><br><span class="line">            elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素至索引处，索引处和其之后的元素全部后挪一位</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查index是否合法</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"index不合法+ index:"</span> + index + <span class="string">",size:"</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//是否需要扩容,true-&gt;扩容</span></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//size-(index+1)+1</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将集合e中的元素放到数组中</span></span><br><span class="line">        Object[] a = e.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);</span><br><span class="line">        <span class="comment">//将新数组添加到底层数组的尾部</span></span><br><span class="line">        System.arraycopy(a,<span class="number">0</span>,elementData,size,numNew);</span><br><span class="line">        size +=numNew;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据索引查询（数组的随机查询，效率高）</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查index是否合法（是否越界）</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">        <span class="comment">//返回查询的元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查给定索引是否在数组的有效范围内</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"index不合法！！index:"</span> + index + <span class="string">",size:"</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据索引修改元素</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//检查index是否合法（是否越界）</span></span><br><span class="line">       rangeCheck(index);</span><br><span class="line">       E oldValue = (E) elementData[index];</span><br><span class="line">       elementData[index] = element;</span><br><span class="line">       <span class="keyword">return</span> oldValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据索引删除元素，并将其之后的元素向前移一位</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       rangeCheck(index);</span><br><span class="line">       E oldValue = (E) elementData[index];</span><br><span class="line">       <span class="comment">//要改变下标的元素个数 size-（index+1）</span></span><br><span class="line">       <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">//从elementData数组的下标index+1开始，覆盖到从elementData数组的下标index的位置</span></span><br><span class="line">           System.arraycopy(elementData, index + <span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//尾部的元素设置为null，size先-- 再使用</span></span><br><span class="line">       elementData[--size] = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">return</span> oldValue;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据元素删除，遍历数组找到第一个于 o == 的元素 获取他的索引将其删除</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   remove(index);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                   remove(index);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.clh.test.mylist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写ArrayList，底层是数组（Array），在查询大量数据时for遍历效率大于Iterator</span></span><br><span class="line"><span class="comment"> * 特点：查询快，增删慢 线程不安全 效率高</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 华华</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/29</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始的数组（空数组）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 底层数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object[] elementData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包含的元素个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建MyArrayList对象时，并且使elementData为默认长度（空）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">(Collection&lt;? extends E&gt; e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        addAll(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//是否对数组进行扩容</span></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确保内部容量</span></span><br><span class="line"><span class="comment">     * 判断数组的容量，小于minCapacity就进行扩容1.5倍</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minCapacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果是空数组则 minCapacity = 10</span></span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//原数组容量</span></span><br><span class="line">            <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">            <span class="comment">//扩容为之前的1.5倍（扩容因子为1.5）</span></span><br><span class="line">            <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//如果新容量 小于 最小容量，则新容量 = 最小容量</span></span><br><span class="line">            <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                newCapacity = minCapacity;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//ArrayList最大数组长度为Integer.MAX_VALUE - 8</span></span><br><span class="line">            <span class="keyword">if</span> (newCapacity &gt; (Integer.MAX_VALUE - <span class="number">8</span>)) &#123;</span><br><span class="line">                <span class="comment">// overflow</span></span><br><span class="line">                <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">                &#125;</span><br><span class="line">                newCapacity = (minCapacity &gt; Integer.MAX_VALUE - <span class="number">8</span>) ? Integer.MAX_VALUE : Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//创建新长度的数组，并将原数组数据赋值给新数组</span></span><br><span class="line">            elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素至索引处，索引处和其之后的元素全部后挪一位</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查index是否合法</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"index不合法+ index:"</span> + index + <span class="string">",size:"</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//是否需要扩容,true-&gt;扩容</span></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//size-(index+1)+1</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; e)</span> </span>&#123;</span><br><span class="line">        Object[] a = e.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);</span><br><span class="line">        <span class="comment">//将新数组添加到底层数组的尾部</span></span><br><span class="line">        System.arraycopy(a,<span class="number">0</span>,elementData,size,numNew);</span><br><span class="line">        size +=numNew;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引查询（数组的随机查询，效率高）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查index是否合法（是否越界）</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">        <span class="comment">//返回查询的元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查给定索引是否在数组的有效范围内</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"index不合法！！index:"</span> + index + <span class="string">",size:"</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查index是否合法（是否越界）</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        E oldValue = (E) elementData[index];</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引删除元素，并将其之后的元素向前移一位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        E oldValue = (E) elementData[index];</span><br><span class="line">        <span class="comment">//要改变下标的元素个数 size-（index+1）</span></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//从elementData数组的下标index+1开始，覆盖到从elementData数组的下标index的位置</span></span><br><span class="line">            System.arraycopy(elementData, index + <span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//尾部的元素设置为null，size先-- 再使用</span></span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据元素删除，遍历数组找到第一个于 o == 的元素 获取他的索引将其删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    remove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                    remove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>很多场景下ArrayList更受欢迎，但是还有些情况下LinkedList更为合适。譬如：</p><ol><li><p>你的应用不会随机访问数据。因为如果你需要LinkedList中的第n个元素的时候，你需要从第一个元素顺序数到第n个数据，然后读取数据。</p></li><li><p>你的应用更多的插入和删除元素，更少的读取数据。因为插入和删除元素不涉及重排数据，所以它要比ArrayList要快。</p></li></ol><p>上述是关于ArrayList和LinkedList的差别。当需要一个不同步的基于索引的数据访问时，请尽量使用ArrayList。但是要记得要给定一个合适的初始大小，尽可能的减少更改数组的大小。</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java集合</title>
      <link href="/2020/04/28/java%E9%9B%86%E5%90%88/"/>
      <url>/2020/04/28/java%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是集合"><a href="#什么是集合" class="headerlink" title="什么是集合"></a>什么是集合</h2><ol><li>简而言之，集合就是一个放数据的容器，准确的说是放数据对象引用的容器。<br>集合不能放基本数据类型只能放对象，而数组时可以放所有数据。<br>集合存放的都是对象的引用，而非对象本身。所以我们称集合中的对象就是集合中对象的引用。</li><li>java集合类存放于java.util包中。</li><li>集合类型主要有3种：Set(集）、List(列表）和Map(映射)，List和Set继承了Collection。</li><li>List集合中常用的有ArrayList、Vector和LinkedList</li><li>Set集合中常用的是HashSet和TreeSet</li><li>Map集合中常用的是HashMap和Hashtable<br><img src="/" class="lazyload" data-src="/2020/04/28/java%E9%9B%86%E5%90%88/Collection.png"  alt="Collection"><br><img src="/" class="lazyload" data-src="/2020/04/28/java%E9%9B%86%E5%90%88/map.png"  alt="Map"></li></ol><h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>有序可重复，存储的元素有下标</p><h3 id="List常用的实现类"><a href="#List常用的实现类" class="headerlink" title="List常用的实现类"></a>List常用的实现类</h3><table><thead><tr><th>List实现类</th><th>底层</th><th>速度</th><th>效率</th><th>线程安全</th></tr></thead><tbody><tr><td>ArrayList</td><td>数组</td><td>查询快,增删慢</td><td>高</td><td>否</td></tr><tr><td>Vector</td><td>数组</td><td>查询快,增删慢</td><td>低</td><td>是</td></tr><tr><td>LinkedList</td><td>双向链表</td><td>查询慢,增删快</td><td>高</td><td>否</td></tr></tbody></table><h2 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>无序不可重复</p><h3 id="Set常用的实现类"><a href="#Set常用的实现类" class="headerlink" title="Set常用的实现类"></a>Set常用的实现类</h3><table><thead><tr><th>Set实现类</th><th>底层</th><th>特点</th></tr></thead><tbody><tr><td>HashSet</td><td>HashMap(底层为哈希表)</td><td>放到HashSet中的元素相当于放到HashMap中的Key</td></tr><tr><td>TreeSet</td><td>TreeMap(底层为二叉树)</td><td>放到TreeSet中的元素相当于放到TreeMap中的Key</td></tr></tbody></table><h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ol><li>Map集合和Collection集合没有关系</li><li>Map集合以key和value的这种键值对的方式存储元素</li><li>key和value都是存储java对象的内存地址</li><li>所有Map集合的key都是无序不可重复</li></ol><h3 id="Map常用的实现类"><a href="#Map常用的实现类" class="headerlink" title="Map常用的实现类"></a>Map常用的实现类</h3><table><thead><tr><th>Map实现类</th><th>底层</th><th>线程安全</th></tr></thead><tbody><tr><td>HashMap</td><td>哈希表</td><td>否</td></tr><tr><td>Hashtable</td><td>哈希表</td><td>是</td></tr><tr><td>TreeMap</td><td>二叉树</td><td>否</td></tr><tr><td>Properties(继承Hashtable)</td><td>哈希表</td><td>线程安全</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写LinkedList（仿照源码）</title>
      <link href="/2020/04/28/%E6%89%8B%E5%86%99LinkedList/"/>
      <url>/2020/04/28/%E6%89%8B%E5%86%99LinkedList/</url>
      
        <content type="html"><![CDATA[<h2 id="LinkedList简述"><a href="#LinkedList简述" class="headerlink" title="LinkedList简述"></a>LinkedList简述</h2><p><code>LinkedList</code>底层使用一个<strong>Node数据结构</strong>，有前后两个指针，<strong>双向链表</strong>实现的。相对数组，链表插入效率较高，只需要更改前后两个指针即可；另外链表不存在扩容问题，因为链表不要求存储空间连续，每次插入数据都只是改变last指针；另外，链表所需要的内存比数组要多，因为他要维护前后两个指针；它适合删除，插入较多的场景。</p><p><code>LinkedList</code>是一个继承于<code>AbstractSequentialList</code>的双向链表。</p><ol><li>它也可以被当作堆栈、队列或双端队列进行操作;</li><li>继承了<code>AbstractSequentialList</code>,这个类提供了一个基本的List接口实现，为实现序列访问的数据储存结构的提供了所需要的最小化的接口实现。对于支持随机访问数据的List比如数组，应该优先使用AbstractList。</li><li>实现 List 接口，List是Collection的子接口，它是一个元素有序(按照插入的顺序维护元素顺序)、可重复、可以为null的集合;</li><li>实现 Deque 接口，即能将LinkedList当作双端队列使用;</li><li>实现了Cloneable接口，即覆盖了函数clone()，能克隆;</li><li>实现java.io.Serializable接口，支持序列化;<br>非同步;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="手写实现"><a href="#手写实现" class="headerlink" title="手写实现"></a>手写实现</h2><h3 id="Node类"><a href="#Node类" class="headerlink" title="Node类"></a>Node类</h3><p>在MyLinkedList类中定义Node节点类（静态内部类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//前节点   </span></span><br><span class="line"> Node&lt;E&gt; prev;</span><br><span class="line"> <span class="comment">//当前节点</span></span><br><span class="line"> E item;</span><br><span class="line"> <span class="comment">//后节点</span></span><br><span class="line"> Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;E&gt; prev, E item, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.item = item;</span><br><span class="line">     <span class="keyword">this</span>.prev = prev;</span><br><span class="line">     <span class="keyword">this</span>.next = next;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="定义MyLinkedList的属性"><a href="#定义MyLinkedList的属性" class="headerlink" title="定义MyLinkedList的属性"></a>定义MyLinkedList的属性</h3><p>size（长度）、first（头节点）、last（尾节点）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//链表的长度</span></span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//链表的头部   </span></span><br><span class="line">    Node&lt;E&gt; first;</span><br><span class="line">     <span class="comment">//链表的尾部</span></span><br><span class="line">    Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义增删改查方法"><a href="#定义增删改查方法" class="headerlink" title="定义增删改查方法"></a>定义增删改查方法</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 在链表尾部插入</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//创造节点，将节点连接链表</span></span><br><span class="line">       Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(last, e, <span class="keyword">null</span>);</span><br><span class="line">       <span class="comment">//链表连接节点</span></span><br><span class="line">       <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">//链表为空</span></span><br><span class="line">           <span class="comment">//新节点赋值给头节点</span></span><br><span class="line">           first = newNode;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//链表不为空</span></span><br><span class="line">           <span class="comment">//将当前链表last的下一个节点指向新节点（连接）  last--&gt;newNode</span></span><br><span class="line">           last.next = newNode;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//将新节点变为尾节点</span></span><br><span class="line">       last = newNode;</span><br><span class="line">       size++;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据索引插入</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//当前索引下的节点</span></span><br><span class="line">       Node&lt;E&gt; succ = getNode(index);</span><br><span class="line">       <span class="comment">//前继节点</span></span><br><span class="line">       Node&lt;E&gt; prev = succ.prev;</span><br><span class="line">       <span class="comment">//创建新节点并连接链表</span></span><br><span class="line">       Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(prev, e, succ);</span><br><span class="line">       <span class="comment">//将链表连接新节点</span></span><br><span class="line">       succ.prev = newNode;</span><br><span class="line">       <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">//如果prev为空，则表示链表为空，则新节点赋值给首节点</span></span><br><span class="line">           first = newNode;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//prev的前节点连接新节点</span></span><br><span class="line">           prev.next = newNode;</span><br><span class="line">       &#125;</span><br><span class="line">       size++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将集合c中数据在链表末尾添加</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将集合c中数据在链表指定位置添加</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//检查index是否合法</span></span><br><span class="line">       <span class="keyword">if</span> (index &lt; <span class="number">0</span> &amp;&amp; index &gt; size) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"指定的位置不合法："</span> + index);</span><br><span class="line">       &#125;</span><br><span class="line">       Object[] items = c.toArray();</span><br><span class="line">       <span class="keyword">int</span> length = items.length;</span><br><span class="line">       <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       Node&lt;E&gt; succ, prev;</span><br><span class="line">       <span class="comment">//获得当前索引下的节点和前节点</span></span><br><span class="line">       <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">           succ = <span class="keyword">null</span>;</span><br><span class="line">           prev = last;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           succ = getNode(index);</span><br><span class="line">           prev = succ.prev;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//插入</span></span><br><span class="line">       <span class="keyword">for</span> (Object item : items) &#123;</span><br><span class="line">           E e = (E) item;</span><br><span class="line">           Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(prev, e, <span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">               first = newNode;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               prev.next = newNode;</span><br><span class="line">           &#125;</span><br><span class="line">           prev = newNode;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//定义尾节点</span></span><br><span class="line">       <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</span><br><span class="line">           last = prev;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           prev.next = succ;</span><br><span class="line">           succ.prev = prev;</span><br><span class="line">       &#125;</span><br><span class="line">       size += length;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据索引获取节点</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">Node&lt;E&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//首先判断index是否合法</span></span><br><span class="line">       <span class="comment">//size&gt;&gt;1 相当于 size/(2的1次方)</span></span><br><span class="line">       <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">           <span class="comment">//从头部开始找</span></span><br><span class="line">           Node&lt;E&gt; x = first;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">               x = x.next;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> x;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//从尾部开始找</span></span><br><span class="line">           Node&lt;E&gt; x = last;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">               x = x.prev;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> x;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据索引查询数据</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//首先判断index是否合法</span></span><br><span class="line">       checkElementIndex(index);</span><br><span class="line">       <span class="keyword">return</span> getNode(index).item;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据索引修改</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 返回先前位于指定位置的元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">       checkElementIndex(index);</span><br><span class="line">       <span class="comment">//获取当前索引下的节点，并且修改为新数据</span></span><br><span class="line">       Node&lt;E&gt; succ = getNode(index);</span><br><span class="line">       E oldVal = succ.item;</span><br><span class="line">       succ.item = e;</span><br><span class="line">       <span class="keyword">return</span> oldVal;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据索引删除</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="comment">//当前索引下的节点</span></span><br><span class="line">    Node&lt;E&gt; succ = getNode(index);</span><br><span class="line">    <span class="comment">//前继节点</span></span><br><span class="line">    Node&lt;E&gt; prev = succ.prev;</span><br><span class="line">    <span class="comment">//后继节点</span></span><br><span class="line">    Node&lt;E&gt; next = succ.next;</span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//删除的为头节点</span></span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        succ.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//删除的为尾节点</span></span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        succ.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> succ.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现代码（全）"><a href="#实现代码（全）" class="headerlink" title="实现代码（全）"></a>实现代码（全）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.clh.test.mylist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写LinkedList</span></span><br><span class="line"><span class="comment"> * LinkedList是java中的双向链表， 是List接口链表的实现，特点是增删快，查找慢。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 华华</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/27</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表的头部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node&lt;E&gt; first;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表的尾部</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将集合c中数据在链表末尾添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将集合c中数据在链表指定位置添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查index是否合法</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> &amp;&amp; index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"指定的位置不合法："</span> + index);</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] items = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> length = items.length;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;E&gt; succ, prev;</span><br><span class="line">        <span class="comment">//获得当前索引下的节点和前节点</span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            succ = <span class="keyword">null</span>;</span><br><span class="line">            prev = last;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            succ = getNode(index);</span><br><span class="line">            prev = succ.prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入</span></span><br><span class="line">        <span class="keyword">for</span> (Object item : items) &#123;</span><br><span class="line">            E e = (E) item;</span><br><span class="line">            Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(prev, e, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">                first = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev.next = newNode;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = newNode;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义尾节点</span></span><br><span class="line">        <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = succ;</span><br><span class="line">            succ.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">        size += length;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在链表尾部插入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创造节点，将节点连接链表</span></span><br><span class="line">        Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(last, e, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//链表连接节点</span></span><br><span class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//表示链表为空时新节点赋值给首节点</span></span><br><span class="line">            first = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//将当前链表last的下一个节点指向新节点（连接）  last--&gt;newNode</span></span><br><span class="line">            last.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将新节点变为尾节点</span></span><br><span class="line">        last = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引插入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; succ = getNode(index);</span><br><span class="line">        Node&lt;E&gt; prev = succ.prev;</span><br><span class="line">        Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(prev, e, succ);</span><br><span class="line">        succ.prev = newNode;</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引查询数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断index是否合法</span></span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="keyword">return</span> getNode(index).item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引获取节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Node&lt;E&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先判断index是否合法</span></span><br><span class="line">        <span class="comment">//size&gt;&gt;1 相当于 size/(2的1次方)</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="comment">//从头部开始找</span></span><br><span class="line">            Node&lt;E&gt; x = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                x = x.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//从尾部开始找</span></span><br><span class="line">            Node&lt;E&gt; x = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">                x = x.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断参数是否为当前链表的索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"index不合法！！index:"</span> + index + <span class="string">",size:"</span> + size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回先前位于指定位置的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        Node&lt;E&gt; succ = getNode(index);</span><br><span class="line">        E oldVal = succ.item;</span><br><span class="line">        succ.item = e;</span><br><span class="line">        <span class="keyword">return</span> oldVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        Node&lt;E&gt; succ = getNode(index);</span><br><span class="line">        Node&lt;E&gt; prev = succ.prev;</span><br><span class="line">        Node&lt;E&gt; next = succ.next;</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            succ.prev = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            succ.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> succ.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 前节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">        <span class="comment">//当前节点</span></span><br><span class="line">        E item;</span><br><span class="line">        <span class="comment">//后节点</span></span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;E&gt; prev, E item, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.item = item;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>LinkedList</code>的插入思路就是将新节点连接链表、再将链表连接新节点，如果是根据索引插入就要判断索引是否合法，是否在首部或尾部进行插入。删改查都差不多</p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot实现邮件登录注册</title>
      <link href="/2020/04/19/Email/"/>
      <url>/2020/04/19/Email/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Spring-Boot完成邮箱登录注册"><a href="#使用Spring-Boot完成邮箱登录注册" class="headerlink" title="使用Spring Boot完成邮箱登录注册"></a>使用Spring Boot完成邮箱登录注册</h2><p>源码：<a href="https://github.com/Hobo-clh/spring-boot-email" target="_blank" rel="noopener">https://github.com/Hobo-clh/spring-boot-email</a></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>主要记录一下邮箱注册，使用Spring Boot和MyBatis</p><ol><li>springboot中导入email相关依赖</li><li>开启邮箱的POP3/SMTP服务（这里使用的是qq邮箱）文档</li><li>在springboot的配置文件中添加email相关配置</li></ol><h3 id="编码思路"><a href="#编码思路" class="headerlink" title="编码思路"></a>编码思路</h3><ul><li>获取验证码：填写邮箱号后点击发送验证码按钮–&gt;发送ajax请求–&gt;后端生成验证码发送邮件，生成一个验证对象插入验证表中，使用多线程五分钟后删除改信息。</li><li>注册： 点击注册按钮–&gt;发送ajax请求–&gt;后端判断验证码是否正确–&gt;返回json数据–&gt;注册是否成功</li></ul><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ul><li><p><strong>目录结构</strong><br><img src="/" class="lazyload" data-src="/2020/04/19/Email/structure.png"  alt="目录结构"></p></li><li><p>在idea中创建Spring Boot工程<br>  在pom.xml 配置文件中加入spring-boot-starter-mail 依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在springboot配置文件application.yml中添加邮箱配置信息</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#邮件相关配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">longhuahobo@foxmail.com</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">qq邮箱是授权码</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">465</span></span><br><span class="line">  <span class="comment"># SMTP服务</span></span><br><span class="line">  <span class="attr">properties:</span></span><br><span class="line">    <span class="attr">mail:</span></span><br><span class="line">      <span class="attr">smtp:</span></span><br><span class="line">        <span class="attr">ssl:</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">auth:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">socketFactory:</span></span><br><span class="line">          <span class="attr">class:</span> <span class="string">javax.net.ssl.SSLSocketFactory</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">465</span></span><br></pre></td></tr></table></figure></li><li><p>model层User和Verify实体类，数据库创建相对应的表</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.model;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.model;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 临时验证码存放表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Verify</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当进行注册的业务逻辑时，会出现一些错误信息，例如邮箱号为空、验证码为空等，要将这些信息精准的返回给用户则需要添加一个enum类，对这些错误信息进行定义</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.exception;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义枚举类,将错误信息定义为枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CustomizeErrorCode &#123;</span><br><span class="line">    EMAIL_IS_EXIST(<span class="number">201</span>,<span class="string">"邮箱已经注册过了"</span>),</span><br><span class="line">    EMAIL_IS_BLANK(<span class="number">202</span>,<span class="string">"邮箱不能为空"</span>),</span><br><span class="line">    EMAIL_OR_PWD_BLANK(<span class="number">203</span>,<span class="string">"邮箱或密码不能为空"</span>),</span><br><span class="line">    INVALID_ADDRESSES(<span class="number">204</span>,<span class="string">"无效的地址！"</span>),</span><br><span class="line">    VERIFY_IS_ERROR(<span class="number">205</span>,<span class="string">"验证码错误"</span>),</span><br><span class="line">    REGISTER_FAIL(<span class="number">206</span>,<span class="string">"注册失败"</span>),</span><br><span class="line">    EMAIL_OR_PWD_ERROR(<span class="number">206</span>,<span class="string">"邮箱号或密码错误，登录失败"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    CustomizeErrorCode(Integer code,String message) &#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将错误信息封装到dto层的ResuDTO中</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springboot.exception.CustomizeErrorCode;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将CustomizeErrorCode枚举对象的值转换给ResultDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode 枚举对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultDTO <span class="title">errorInfo</span><span class="params">(CustomizeErrorCode errorCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> init(errorCode.getCode(),errorCode.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化ResultDTO对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 描述信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ResultDTO <span class="title">init</span><span class="params">(Integer code,String message)</span></span>&#123;</span><br><span class="line">        ResultDTO resultDTO = <span class="keyword">new</span> ResultDTO();</span><br><span class="line">        resultDTO.setCode(code);</span><br><span class="line">        resultDTO.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> resultDTO;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultDTO <span class="title">info</span><span class="params">(Integer code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> init(code,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller层的RegisterController</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springboot.dto.ResultDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.exception.CustomizeErrorCode;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.service.RegisterService;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">registerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RegisterService registerService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSender mailSender;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册</span></span><br><span class="line"><span class="comment">     * 将注册参数code、email、pwd封装带UserDTO中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultDTO 返回json格式，带有code和message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultDTO <span class="title">register</span><span class="params">(UserDTO userDTO)</span></span>&#123;</span><br><span class="line">        System.out.println(userDTO);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(userDTO.getEmail())&amp;&amp;StringUtils.isBlank(userDTO.getPassword()))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultDTO.errorInfo(CustomizeErrorCode.EMAIL_OR_PWD_BLANK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> registerService.register(userDTO);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 邮箱号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultDTO 返回json格式，带有code和message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/sendCode"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultDTO <span class="title">sendCode</span><span class="params">(@RequestParam(<span class="string">"email"</span>)</span> String email)</span>&#123;</span><br><span class="line">        System.out.println(email);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(email))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultDTO.errorInfo(CustomizeErrorCode.EMAIL_IS_BLANK);</span><br><span class="line">        &#125;</span><br><span class="line">        ResultDTO resultDTO = registerService.sendCode(email);</span><br><span class="line">        <span class="keyword">if</span> (resultDTO.getCode()==<span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">//多线程五分钟后删除</span></span><br><span class="line">            registerService.removeCode(email);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>service层的RegisterService，创建多线程将发送的验证码在5分钟后进行删除（使用“@Async”时需要在Spring Boot启动类使用“@EnableAsync”）</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springboot.dto.ResultDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.exception.CustomizeErrorCode;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.mapper.VerifyMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.model.User;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.model.Verify;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.MailException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSender mailSender;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    VerifyMapper verifyMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查邮箱号是否注册</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 邮箱号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkRegister</span><span class="params">(String email)</span></span>&#123;</span><br><span class="line">        User user1 = userMapper.selectByEmail(email);</span><br><span class="line">        <span class="keyword">if</span> (user1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDTO 该对象参数含有email、pwd、code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultDTO <span class="title">register</span><span class="params">(UserDTO userDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//checkRegister()返回结果为true表示可以注册</span></span><br><span class="line">        <span class="keyword">if</span> (!checkRegister(userDTO.getEmail()))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultDTO.errorInfo(CustomizeErrorCode.EMAIL_IS_EXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        userDTO.getCode();</span><br><span class="line">        Verify verify = verifyMapper.selectVerify(userDTO.getCode(),userDTO.getEmail());</span><br><span class="line">        <span class="keyword">if</span> (verify==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//验证码错误</span></span><br><span class="line">            <span class="keyword">return</span> ResultDTO.errorInfo(CustomizeErrorCode.VERIFY_IS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setEmail(userDTO.getEmail());</span><br><span class="line">        user.setPassword(userDTO.getPassword());</span><br><span class="line">        <span class="keyword">int</span> flag = userMapper.insert(user);</span><br><span class="line">        <span class="comment">//注册成功</span></span><br><span class="line">        <span class="keyword">if</span> (flag==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//登录成功将验证码删除</span></span><br><span class="line">            verifyMapper.deleteByEmail(userDTO.getEmail());</span><br><span class="line">            <span class="keyword">return</span> ResultDTO.info(<span class="number">200</span>,<span class="string">"注册成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注册失败</span></span><br><span class="line">        <span class="keyword">return</span> ResultDTO.errorInfo(CustomizeErrorCode.REGISTER_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送邮件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 邮箱号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultDTO <span class="title">sendCode</span><span class="params">(String email)</span></span>&#123;</span><br><span class="line">        <span class="comment">//随机六位数验证码</span></span><br><span class="line">        <span class="keyword">if</span> (!checkRegister(email))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultDTO.errorInfo(CustomizeErrorCode.EMAIL_IS_EXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            <span class="keyword">int</span> code = (<span class="keyword">int</span>)((Math.random() * <span class="number">9</span> + <span class="number">1</span>) * <span class="number">100000</span>);</span><br><span class="line">            message.setSubject(<span class="string">"Hobo社区验证码"</span>);</span><br><span class="line">            message.setText(<span class="string">"欢迎加入Hobo社区！ 您的验证码是："</span>+ code + <span class="string">"，请在5分钟内完成注册。"</span>);</span><br><span class="line">            message.setTo(email);</span><br><span class="line">            message.setFrom(<span class="string">"longhuahobo@foxmail.com"</span>);</span><br><span class="line">            mailSender.send(message);</span><br><span class="line">            Verify verify = <span class="keyword">new</span> Verify();</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            verify.setCode(code);</span><br><span class="line">            verify.setEmail(email);</span><br><span class="line">            verifyMapper.insert(verify);</span><br><span class="line">            <span class="keyword">return</span> ResultDTO.info(<span class="number">200</span>,<span class="string">"邮件发送成功"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (MailException e)&#123;</span><br><span class="line">            log.error(<span class="string">"邮件发送出错"</span> + e);</span><br><span class="line">            <span class="keyword">return</span> ResultDTO.errorInfo(CustomizeErrorCode.INVALID_ADDRESSES);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用多线程五分钟后清除验证码数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email email</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCode</span><span class="params">(String email)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">5</span>);</span><br><span class="line">            verifyMapper.deleteByEmail(email);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mapper层的UserMapper、VerifyMapper，使用注解方式对数据库进行增删改查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springboot.model.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入用户表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户，带有email、password参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(email,password) values(#&#123;email&#125;,#&#123;password&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用id查找用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">selectById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用邮箱号和密码查找用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 邮箱号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password  密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where email = #&#123;email&#125; and password = #&#123;password&#125; "</span>)</span><br><span class="line">    <span class="function">User <span class="title">selectByEmailPwd</span><span class="params">(String email, String password)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用邮箱号查找用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 邮箱号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where email = #&#123;email&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">selectByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springboot.model.Verify;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VerifyMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入验证表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verify 带有email和code参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into verify(email,code) values(#&#123;email&#125;,#&#123;code&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Verify verify)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用验证码和邮箱号查找验证表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 邮箱号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from verify where code = #&#123;code&#125; and email = #&#123;email&#125;"</span>)</span><br><span class="line">    <span class="function">Verify <span class="title">selectVerify</span><span class="params">(String code,String email)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用邮箱号删除验证表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 邮箱号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from verify where email = #&#123;email&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端代码省略….<br><img src="/" class="lazyload" data-src="/2020/04/19/Email/result.png"  alt="result"><br><img src="/" class="lazyload" data-src="/2020/04/19/Email/result2.png"  alt="result2">    </p></li></ul><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery的过滤器</title>
      <link href="/2020/04/05/jQuery%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2020/04/05/jQuery%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1、基本属性过滤器"><a href="#1、基本属性过滤器" class="headerlink" title="1、基本属性过滤器"></a>1、基本属性过滤器</h2><ul><li><p>获取–属性名等于指定值的元素<br>$(“选择器[属性名=值]”)</p></li><li><p>获取–不含指定值的元素<br>$(“选择器[属性名!=’值’]”) </p></li><li><p>获取–指定值开始的元素<br>$(“选择器[属性名^=’值’]”）</p></li><li><p>获取–指定值结束的元素<br>$(“选择器[属性名$=’值’]”）</p></li><li><p>获取–包含指定值的元素<br>$(“选择器[属性名*=’值’]”)</p></li></ul><p><strong>复合属性过滤器</strong><br> $ ([属性过滤器 1] [属性过滤器 2]……[属性过滤器 n]) </p><h2 id="基本过滤器"><a href="#基本过滤器" class="headerlink" title="基本过滤器"></a>基本过滤器</h2><ul><li><p>获取选择器的第一个元素<br>$(“选择器:first”) </p></li><li><p>获取选择器的最后一个元素<br>$(“选择器:last”) </p></li><li><p>$(“选择器:not()”)<br>获取not过滤器可以去除所有与给的选择器匹配的元素<br>例如:<br>$(“div :not([id])”)，除去含有id属性的div<br>$(“li :not(:first)”)，除去第一个li元素</p></li><li><p>$(“选择器:even”)<br>获取索引值为奇数的元素</p></li><li><p>$(“选择器:odd”)<br>获取索引值为偶数的元素</p></li><li><p>$(“选择器:eq(2)”)<br>获取索引值为2的元素</p></li><li><p>$(“选择器:gt(2)”)<br>获取索引值大于2的元素</p></li><li><p>$(“选择器:it(3)”)<br>获取索引值小于3的元素</p></li><li><p>$(“选择器:header”)<br>选择所有 h1、h2、h3 一类的header 标签</p></li></ul><h2 id="内容过滤器："><a href="#内容过滤器：" class="headerlink" title="内容过滤器："></a>内容过滤器：</h2><ul><li><p>contains()<br>使用 :contains() 过滤器可以匹配包含指定文本的元素。<br>例如：$(“div:contains(HTML)”) 可以选择内容包含 HTML 的 div 元素。</p></li><li><p>empty()<br>例如：使用 $(“td:empty”)可以选择内容为空的表格单元格。</p></li><li><p>has()<br>例如： $(“p”).has(“span”)<br>返回拥有一个span元素在其内的所有p元素</p></li><li><p>parent()<br>$(“p”).parent(“.selected”)<br>返回class为selected的p元素</p></li></ul><h2 id="子元素过滤器"><a href="#子元素过滤器" class="headerlink" title="子元素过滤器"></a>子元素过滤器</h2><ul><li><p>nth-child(index/even/odd/eq)<br>$ (“ul li:nth-child(2)”) 可以匹配 ul 元素中的第2个 li 子元素，<br>$ (“ul li:nth-child(even)”) 可以匹配 ul 元素中的第偶数个 li 子元素。</p></li><li><p>first-child<br>可以使用 :first-child 过滤器匹配第一个子元素<br>$ (“ul li:first-child”) 可以匹配 ul 列表中的第一个 li 子元素。</p></li><li><p>last-child<br>:last-child 过滤器匹配最后一个子元素。<br>$ (“ul li:last-child”) 可以匹配 ul 列表中的最后一个 li 子元素。</p></li><li><p>only-child<br>可以使用 :only-child 过滤器匹配父元素的唯一子元素。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>简单总结一下jQuery的过滤器，以后如果用到了又忘记了就翻翻这篇博客</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Spring Boot的小型论坛项目</title>
      <link href="/2020/04/04/Boot%E9%A1%B9%E7%9B%AE/"/>
      <url>/2020/04/04/Boot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>项目地址： <strong><a href="http://39.97.226.211:81/" target="_blank" rel="noopener">Hobo社区</a></strong><br>服务器：阿里云CentOS7</p><h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a>项目技术栈</h2><ul><li><p>后端Spring Boot、MyBatis、mysql</p></li><li><p>前端使用BootStrap框架、thymeleaf模板引擎</p></li><li><p>使用了flyway管理数据库版本，方便迁移数据库</p></li><li><p>使用MyBatis Generator自动生成mapper、model、xml文件，一般情况下不用再写sql语句了，极大地提高了开发效率</p></li><li><p>第三方工具<br>使用了<a href="https://pandao.github.io/editor.md/" target="_blank" rel="noopener">EditorMarkdown编辑器</a>，支持md语法，并且支持上传<br>使用了阿里云对象存储OSS管理上传的图片</p></li></ul><h2 id="项目功能介绍"><a href="#项目功能介绍" class="headerlink" title="项目功能介绍"></a>项目功能介绍</h2><ul><li><p>登录功能：使用<a href="https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/" target="_blank" rel="noopener">GitHub第三方登录</a>，也可以表单注册登录（之后会加入<a href="https://wiki.connect.qq.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C_oauth2-0" target="_blank" rel="noopener">QQ第三方登录</a>）</p></li><li><p>提问：支持markdown语法</p></li><li><p>点赞、评论、二级评论</p></li><li><p>通知功能：点赞、评论或者二级评论后，会产生通知</p></li><li><p>热门标签：使用Spring Schedule定时任务，定时计算出标签的热度</p></li><li><p>相关问题：通过正则匹配标签，只要含有当前文章的其中一个标签，都会被列为相关问题</p><table><thead><tr><th>模式</th><th>模式匹配</th></tr></thead><tbody><tr><td>tag1 | tag2 | tag3</td><td>交替匹配任何模式tag1，tag2或tag3</td></tr></tbody></table></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学完Spring Boot的入门视频不久，想找一个项目练练手，就在B站上看到了码匠笔记的论坛项目教学。这就是一个不算复杂的练手项目，B站上跟着码匠笔记学习的，让我简单熟悉了Spring Boot的开发流程，，之后可能会添加一些新功能或集成一些新框架，加油吧~！</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven-解决新建spring boot项目导入jar包失败的问题</title>
      <link href="/2020/03/17/maven-bug%E4%BF%AE%E5%A4%8D/"/>
      <url>/2020/03/17/maven-bug%E4%BF%AE%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h3><ul><li><p>新建springboot项目时无法导入jar包</p></li><li><p>尝试在maven的settings文件中修改maven镜像–&gt;<strong>没用</strong></p></li><li><p>尝试更换maven版本–&gt;<strong>没用</strong></p></li><li><p>如何查看查看log日志发现是</p></li></ul><blockquote><p>java.lang.RuntimeException: sun.security.provider.certpath.SunCertPathBuilderException:<br>        unable to find valid certification path to requested target<br>        找不到请求目标的有效证书路径</p></blockquote><ul><li>此时就轮到度娘上场了</li></ul><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li><p>下载证书保存在本地，在jdk-&gt;jre-&gt;lib-&gt;security中打开命令行,输入以下命令将证书添加在java证书库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keytool <span class="literal">-import</span> <span class="literal">-alias</span> cacerts <span class="literal">-keystore</span> cacerts <span class="operator">-file</span> &lt;证书路径&gt;</span><br><span class="line"><span class="comment"># 默认密匙changeit</span></span><br></pre></td></tr></table></figure></li><li><p>此时打开idea发现还是下载失败</p></li><li><p>在idea中，打开项目路径下的命令行，执行命令让maven绕过校验服务器的证书</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="literal">-Dmaven</span>.wagon.http.ssl.insecure=true install</span><br></pre></td></tr></table></figure></li><li><p><strong>jar包导入成功！！！！！！</strong></p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>之前学习springboot入门的时候就遇到了这样的问题，当时在我室友帮忙下暂时解决了，可之后又冒了出来，后面我尝试的方法有：修改阿里云镜像，更换maven版本等等，都没用，搞的我差点就去学gradle了。这样的一个历史性难题，今天终于站起来解决了，爽！！！</p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+GitHub搭建我的博客</title>
      <link href="/2020/01/14/hexo-GitHub/"/>
      <url>/2020/01/14/hexo-GitHub/</url>
      
        <content type="html"><![CDATA[<hr><hr><!-- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). --><p><strong>首次尝试用GitHub+hexo搭建博客，大概步骤记录一下</strong> </p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a><strong>准备工作</strong></h3><h4 id="安装git和node-js"><a href="#安装git和node-js" class="headerlink" title="安装git和node.js"></a>安装git和node.js</h4><ul><li>git：进入<a href="https://git-scm.com/" target="_blank" rel="noopener">git官网下载</a></li><li>node.js：进入<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">node.js官网下载</a></li><li>通过以下命令查看是否安装好了git和node.js<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git -<span class="literal">-version</span> </span><br><span class="line">node <span class="literal">-v</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="在自己的磁盘中创建一个文件夹"><a href="#在自己的磁盘中创建一个文件夹" class="headerlink" title="在自己的磁盘中创建一个文件夹"></a>在自己的磁盘中创建一个文件夹</h4><p><img src="/" class="lazyload" data-src="/2020/01/14/hexo-GitHub/path.jpg"  alt="1"></p><p>进入该文件夹后，在路径上输入cmd回车，进入dos窗口输入以下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装hexo</span></span><br><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#安装hexo完成后，再执行下列命令，Hexo将会在指定文件夹中新建所需要的文件</span></span><br><span class="line">hexo init HoboClhBlog</span><br><span class="line">cd HoboClhBlog</span><br><span class="line">npm install</span><br><span class="line"><span class="comment">#输入命令部署在本地的5000端口</span></span><br><span class="line">hexo s <span class="literal">-p</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><p><strong>此时可以在在本地5000端口访问博客了</strong></p><h3 id="部署在GitHub上"><a href="#部署在GitHub上" class="headerlink" title="部署在GitHub上"></a><strong>部署在GitHub上</strong></h3><h4 id="在GitHub中新建仓库"><a href="#在GitHub中新建仓库" class="headerlink" title="在GitHub中新建仓库"></a>在GitHub中新建仓库</h4><p>进入<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>创建仓库，仓库名必须要遵守格式：账户名.github.io</p><h4 id="配置ssh-Key"><a href="#配置ssh-Key" class="headerlink" title="配置ssh Key"></a>配置ssh Key</h4><ul><li>执行以下命令全局配置一下本地账户：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">"github邮箱号"</span></span><br></pre></td></tr></table></figure></li><li>之后在C:\用户\用户名.ssh这个路径下会生成两个文件：id_rsa和id_rsa.pub</li><li>使用记事本打开复制id_rsa.pub，复制</li><li>打开GitHub–&gt;右上角头像–&gt;settings–&gt;SSH and GPG Keys</li><li>点击new SSH Key，将刚刚的内容粘贴</li><li>完毕</li></ul><h4 id="在博客根目录下的-config-yml-文件中修改以下"><a href="#在博客根目录下的-config-yml-文件中修改以下" class="headerlink" title="在博客根目录下的 _config.yml 文件中修改以下"></a>在博客根目录下的 _config.yml 文件中修改以下</h4><p><img src="/" class="lazyload" data-src="/2020/01/14/hexo-GitHub/config-1.png"  alt="config1"><br><img src="/" class="lazyload" data-src="/2020/01/14/hexo-GitHub/config-2.png"  alt="config2"></p><h4 id="安装部署插件、上传"><a href="#安装部署插件、上传" class="headerlink" title="安装部署插件、上传"></a>安装部署插件、上传</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer</span><span class="literal">-git</span> -<span class="literal">-save</span> <span class="comment">#安装插件</span></span><br><span class="line">hexo g <span class="comment">#生成静态文件</span></span><br><span class="line">hexo d <span class="comment">#上传至GitHub</span></span><br></pre></td></tr></table></figure><h4 id="完成使用-GitHub用户名-github-io即可进入博客"><a href="#完成使用-GitHub用户名-github-io即可进入博客" class="headerlink" title="完成使用 GitHub用户名.github.io即可进入博客"></a>完成使用 GitHub用户名.github.io即可进入博客</h4><h3 id="修改博客主题"><a href="#修改博客主题" class="headerlink" title="修改博客主题"></a><strong>修改博客主题</strong></h3><h4 id="先挑选一款"><a href="#先挑选一款" class="headerlink" title="先挑选一款"></a>先挑选一款</h4><p>进入<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo官网</a>挑选一款自己喜欢的，在GitHub上下载</p><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><ul><li>将下载的主题放在博客根目录下的themes文件夹中，</li><li>修改博客根目录下配置文件,修改成刚刚下载的主题名<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-meadow</span></span><br></pre></td></tr></table></figure><h4 id="重新部署至GitHub"><a href="#重新部署至GitHub" class="headerlink" title="重新部署至GitHub"></a>重新部署至GitHub</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo s <span class="literal">-p</span> <span class="number">5555</span> <span class="comment">#本地先预览</span></span><br><span class="line">hexo g  </span><br><span class="line">hexo d  <span class="comment">#上传</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2020/01/13/hello-world/"/>
      <url>/2020/01/13/hello-world/</url>
      
        <content type="html"><![CDATA[<!-- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). --><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
