<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Boot实现邮件登录注册</title>
      <link href="/2020/04/19/Email/"/>
      <url>/2020/04/19/Email/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Spring-Boot完成邮箱登录注册"><a href="#使用Spring-Boot完成邮箱登录注册" class="headerlink" title="使用Spring Boot完成邮箱登录注册"></a>使用Spring Boot完成邮箱登录注册</h2><p>源码：<a href="https://github.com/Hobo-clh/spring-boot-email" target="_blank" rel="noopener">https://github.com/Hobo-clh/spring-boot-email</a></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>主要记录一下邮箱注册，使用Spring Boot和MyBatis</p><ol><li>springboot中导入email相关依赖</li><li>开启邮箱的POP3/SMTP服务（这里使用的是qq邮箱）文档</li><li>在springboot的配置文件中添加email相关配置</li></ol><h3 id="编码思路"><a href="#编码思路" class="headerlink" title="编码思路"></a>编码思路</h3><ul><li>获取验证码：填写邮箱号后点击发送验证码按钮–&gt;发送ajax请求–&gt;后端生成验证码发送邮件，生成一个验证对象插入验证表中，使用多线程五分钟后删除改信息。</li><li>注册： 点击注册按钮–&gt;发送ajax请求–&gt;后端判断验证码是否正确–&gt;返回json数据–&gt;注册是否成功</li></ul><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ul><li><p><strong>目录结构</strong><br><img src="/" class="lazyload" data-src="/2020/04/19/Email/structure.png"  alt="目录结构"></p></li><li><p>在idea中创建Spring Boot工程<br>  在pom.xml 配置文件中加入spring-boot-starter-mail 依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在springboot配置文件application.yml中添加邮箱配置信息</p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#邮件相关配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">longhuahobo@foxmail.com</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">qq邮箱是授权码</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">465</span></span><br><span class="line">  <span class="comment"># SMTP服务</span></span><br><span class="line">  <span class="attr">properties:</span></span><br><span class="line">    <span class="attr">mail:</span></span><br><span class="line">      <span class="attr">smtp:</span></span><br><span class="line">        <span class="attr">ssl:</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">auth:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">socketFactory:</span></span><br><span class="line">          <span class="attr">class:</span> <span class="string">javax.net.ssl.SSLSocketFactory</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">465</span></span><br></pre></td></tr></table></figure></li><li><p>model层User和Verify实体类，数据库创建相对应的表</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.model;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.model;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 临时验证码存放表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Verify</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当进行注册的业务逻辑时，会出现一些错误信息，例如邮箱号为空、验证码为空等，要将这些信息精准的返回给用户则需要添加一个enum类，对这些错误信息进行定义</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.exception;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义枚举类,将错误信息定义为枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CustomizeErrorCode &#123;</span><br><span class="line">    EMAIL_IS_EXIST(<span class="number">201</span>,<span class="string">"邮箱已经注册过了"</span>),</span><br><span class="line">    EMAIL_IS_BLANK(<span class="number">202</span>,<span class="string">"邮箱不能为空"</span>),</span><br><span class="line">    EMAIL_OR_PWD_BLANK(<span class="number">203</span>,<span class="string">"邮箱或密码不能为空"</span>),</span><br><span class="line">    INVALID_ADDRESSES(<span class="number">204</span>,<span class="string">"无效的地址！"</span>),</span><br><span class="line">    VERIFY_IS_ERROR(<span class="number">205</span>,<span class="string">"验证码错误"</span>),</span><br><span class="line">    REGISTER_FAIL(<span class="number">206</span>,<span class="string">"注册失败"</span>),</span><br><span class="line">    EMAIL_OR_PWD_ERROR(<span class="number">206</span>,<span class="string">"邮箱号或密码错误，登录失败"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    CustomizeErrorCode(Integer code,String message) &#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将错误信息封装到dto层的ResuDTO中</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springboot.exception.CustomizeErrorCode;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将CustomizeErrorCode枚举对象的值转换给ResultDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode 枚举对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultDTO <span class="title">errorInfo</span><span class="params">(CustomizeErrorCode errorCode)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> init(errorCode.getCode(),errorCode.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化ResultDTO对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 描述信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ResultDTO <span class="title">init</span><span class="params">(Integer code,String message)</span></span>&#123;</span><br><span class="line">        ResultDTO resultDTO = <span class="keyword">new</span> ResultDTO();</span><br><span class="line">        resultDTO.setCode(code);</span><br><span class="line">        resultDTO.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> resultDTO;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultDTO <span class="title">info</span><span class="params">(Integer code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> init(code,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller层的RegisterController</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springboot.dto.ResultDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.exception.CustomizeErrorCode;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.service.RegisterService;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">registerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RegisterService registerService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSender mailSender;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册</span></span><br><span class="line"><span class="comment">     * 将注册参数code、email、pwd封装带UserDTO中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultDTO 返回json格式，带有code和message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultDTO <span class="title">register</span><span class="params">(UserDTO userDTO)</span></span>&#123;</span><br><span class="line">        System.out.println(userDTO);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(userDTO.getEmail())&amp;&amp;StringUtils.isBlank(userDTO.getPassword()))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultDTO.errorInfo(CustomizeErrorCode.EMAIL_OR_PWD_BLANK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> registerService.register(userDTO);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 邮箱号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultDTO 返回json格式，带有code和message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/sendCode"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultDTO <span class="title">sendCode</span><span class="params">(@RequestParam(<span class="string">"email"</span>)</span> String email)</span>&#123;</span><br><span class="line">        System.out.println(email);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(email))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultDTO.errorInfo(CustomizeErrorCode.EMAIL_IS_BLANK);</span><br><span class="line">        &#125;</span><br><span class="line">        ResultDTO resultDTO = registerService.sendCode(email);</span><br><span class="line">        <span class="keyword">if</span> (resultDTO.getCode()==<span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">//多线程五分钟后删除</span></span><br><span class="line">            registerService.removeCode(email);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>service层的RegisterService，创建多线程将发送的验证码在5分钟后进行删除（使用“@Async”时需要在Spring Boot启动类使用“@EnableAsync”）</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springboot.dto.ResultDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.exception.CustomizeErrorCode;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.mapper.VerifyMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.model.User;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot.model.Verify;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.MailException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSender mailSender;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    VerifyMapper verifyMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查邮箱号是否注册</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 邮箱号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkRegister</span><span class="params">(String email)</span></span>&#123;</span><br><span class="line">        User user1 = userMapper.selectByEmail(email);</span><br><span class="line">        <span class="keyword">if</span> (user1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDTO 该对象参数含有email、pwd、code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultDTO <span class="title">register</span><span class="params">(UserDTO userDTO)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//checkRegister()返回结果为true表示可以注册</span></span><br><span class="line">        <span class="keyword">if</span> (!checkRegister(userDTO.getEmail()))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultDTO.errorInfo(CustomizeErrorCode.EMAIL_IS_EXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        userDTO.getCode();</span><br><span class="line">        Verify verify = verifyMapper.selectVerify(userDTO.getCode(),userDTO.getEmail());</span><br><span class="line">        <span class="keyword">if</span> (verify==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//验证码错误</span></span><br><span class="line">            <span class="keyword">return</span> ResultDTO.errorInfo(CustomizeErrorCode.VERIFY_IS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setEmail(userDTO.getEmail());</span><br><span class="line">        user.setPassword(userDTO.getPassword());</span><br><span class="line">        <span class="keyword">int</span> flag = userMapper.insert(user);</span><br><span class="line">        <span class="comment">//注册成功</span></span><br><span class="line">        <span class="keyword">if</span> (flag==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//登录成功将验证码删除</span></span><br><span class="line">            verifyMapper.deleteByEmail(userDTO.getEmail());</span><br><span class="line">            <span class="keyword">return</span> ResultDTO.info(<span class="number">200</span>,<span class="string">"注册成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注册失败</span></span><br><span class="line">        <span class="keyword">return</span> ResultDTO.errorInfo(CustomizeErrorCode.REGISTER_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送邮件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 邮箱号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResultDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultDTO <span class="title">sendCode</span><span class="params">(String email)</span></span>&#123;</span><br><span class="line">        <span class="comment">//随机六位数验证码</span></span><br><span class="line">        <span class="keyword">if</span> (!checkRegister(email))&#123;</span><br><span class="line">            <span class="keyword">return</span> ResultDTO.errorInfo(CustomizeErrorCode.EMAIL_IS_EXIST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">            <span class="keyword">int</span> code = (<span class="keyword">int</span>)((Math.random() * <span class="number">9</span> + <span class="number">1</span>) * <span class="number">100000</span>);</span><br><span class="line">            message.setSubject(<span class="string">"Hobo社区验证码"</span>);</span><br><span class="line">            message.setText(<span class="string">"欢迎加入Hobo社区！ 您的验证码是："</span>+ code + <span class="string">"，请在5分钟内完成注册。"</span>);</span><br><span class="line">            message.setTo(email);</span><br><span class="line">            message.setFrom(<span class="string">"longhuahobo@foxmail.com"</span>);</span><br><span class="line">            mailSender.send(message);</span><br><span class="line">            Verify verify = <span class="keyword">new</span> Verify();</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            verify.setCode(code);</span><br><span class="line">            verify.setEmail(email);</span><br><span class="line">            verifyMapper.insert(verify);</span><br><span class="line">            <span class="keyword">return</span> ResultDTO.info(<span class="number">200</span>,<span class="string">"邮件发送成功"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (MailException e)&#123;</span><br><span class="line">            log.error(<span class="string">"邮件发送出错"</span> + e);</span><br><span class="line">            <span class="keyword">return</span> ResultDTO.errorInfo(CustomizeErrorCode.INVALID_ADDRESSES);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用多线程五分钟后清除验证码数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email email</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCode</span><span class="params">(String email)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">5</span>);</span><br><span class="line">            verifyMapper.deleteByEmail(email);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mapper层的UserMapper、VerifyMapper，使用注解方式对数据库进行增删改查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springboot.model.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入用户表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户，带有email、password参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(email,password) values(#&#123;email&#125;,#&#123;password&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用id查找用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">selectById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用邮箱号和密码查找用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 邮箱号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password  密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where email = #&#123;email&#125; and password = #&#123;password&#125; "</span>)</span><br><span class="line">    <span class="function">User <span class="title">selectByEmailPwd</span><span class="params">(String email, String password)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用邮箱号查找用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 邮箱号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where email = #&#123;email&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">selectByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springboot.model.Verify;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VerifyMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入验证表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verify 带有email和code参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into verify(email,code) values(#&#123;email&#125;,#&#123;code&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Verify verify)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用验证码和邮箱号查找验证表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 邮箱号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from verify where code = #&#123;code&#125; and email = #&#123;email&#125;"</span>)</span><br><span class="line">    <span class="function">Verify <span class="title">selectVerify</span><span class="params">(String code,String email)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用邮箱号删除验证表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 邮箱号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from verify where email = #&#123;email&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端代码省略….<br><img src="/" class="lazyload" data-src="/2020/04/19/Email/result.png"  alt="result"><br><img src="/" class="lazyload" data-src="/2020/04/19/Email/result2.png"  alt="result2">    </p></li></ul><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery的过滤器</title>
      <link href="/2020/04/05/jQuery%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2020/04/05/jQuery%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1、基本属性过滤器"><a href="#1、基本属性过滤器" class="headerlink" title="1、基本属性过滤器"></a>1、基本属性过滤器</h2><ul><li><p>获取–属性名等于指定值的元素<br>$(“选择器[属性名=值]”)</p></li><li><p>获取–不含指定值的元素<br>$(“选择器[属性名!=’值’]”) </p></li><li><p>获取–指定值开始的元素<br>$(“选择器[属性名^=’值’]”）</p></li><li><p>获取–指定值结束的元素<br>$(“选择器[属性名$=’值’]”）</p></li><li><p>获取–包含指定值的元素<br>$(“选择器[属性名*=’值’]”)</p></li></ul><p><strong>复合属性过滤器</strong><br> $ ([属性过滤器 1] [属性过滤器 2]……[属性过滤器 n]) </p><h2 id="基本过滤器"><a href="#基本过滤器" class="headerlink" title="基本过滤器"></a>基本过滤器</h2><ul><li><p>获取选择器的第一个元素<br>$(“选择器:first”) </p></li><li><p>获取选择器的最后一个元素<br>$(“选择器:last”) </p></li><li><p>$(“选择器:not()”)<br>获取not过滤器可以去除所有与给的选择器匹配的元素<br>例如:<br>$(“div :not([id])”)，除去含有id属性的div<br>$(“li :not(:first)”)，除去第一个li元素</p></li><li><p>$(“选择器:even”)<br>获取索引值为奇数的元素</p></li><li><p>$(“选择器:odd”)<br>获取索引值为偶数的元素</p></li><li><p>$(“选择器:eq(2)”)<br>获取索引值为2的元素</p></li><li><p>$(“选择器:gt(2)”)<br>获取索引值大于2的元素</p></li><li><p>$(“选择器:it(3)”)<br>获取索引值小于3的元素</p></li><li><p>$(“选择器:header”)<br>选择所有 h1、h2、h3 一类的header 标签</p></li></ul><h2 id="内容过滤器："><a href="#内容过滤器：" class="headerlink" title="内容过滤器："></a>内容过滤器：</h2><ul><li><p>contains()<br>使用 :contains() 过滤器可以匹配包含指定文本的元素。<br>例如：$(“div:contains(HTML)”) 可以选择内容包含 HTML 的 div 元素。</p></li><li><p>empty()<br>例如：使用 $(“td:empty”)可以选择内容为空的表格单元格。</p></li><li><p>has()<br>例如： $(“p”).has(“span”)<br>返回拥有一个span元素在其内的所有p元素</p></li><li><p>parent()<br>$(“p”).parent(“.selected”)<br>返回class为selected的p元素</p></li></ul><h2 id="子元素过滤器"><a href="#子元素过滤器" class="headerlink" title="子元素过滤器"></a>子元素过滤器</h2><ul><li><p>nth-child(index/even/odd/eq)<br>$ (“ul li:nth-child(2)”) 可以匹配 ul 元素中的第2个 li 子元素，<br>$ (“ul li:nth-child(even)”) 可以匹配 ul 元素中的第偶数个 li 子元素。</p></li><li><p>first-child<br>可以使用 :first-child 过滤器匹配第一个子元素<br>$ (“ul li:first-child”) 可以匹配 ul 列表中的第一个 li 子元素。</p></li><li><p>last-child<br>:last-child 过滤器匹配最后一个子元素。<br>$ (“ul li:last-child”) 可以匹配 ul 列表中的最后一个 li 子元素。</p></li><li><p>only-child<br>可以使用 :only-child 过滤器匹配父元素的唯一子元素。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>简单总结一下jQuery的过滤器，以后如果用到了又忘记了就翻翻这篇博客</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Spring Boot的小型论坛项目</title>
      <link href="/2020/04/04/Boot%E9%A1%B9%E7%9B%AE/"/>
      <url>/2020/04/04/Boot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>项目地址： <strong><a href="http://39.97.226.211:81/" target="_blank" rel="noopener">Hobo社区</a></strong><br>服务器：阿里云CentOS7</p><h2 id="项目技术栈"><a href="#项目技术栈" class="headerlink" title="项目技术栈"></a>项目技术栈</h2><ul><li><p>后端Spring Boot、MyBatis、mysql</p></li><li><p>前端使用BootStrap框架、thymeleaf模板引擎</p></li><li><p>使用了flyway管理数据库版本，方便迁移数据库</p></li><li><p>使用MyBatis Generator自动生成mapper、model、xml文件，一般情况下不用再写sql语句了，极大地提高了开发效率</p></li><li><p>第三方工具<br>使用了<a href="https://pandao.github.io/editor.md/" target="_blank" rel="noopener">EditorMarkdown编辑器</a>，支持md语法，并且支持上传<br>使用了阿里云对象存储OSS管理上传的图片</p></li></ul><h2 id="项目功能介绍"><a href="#项目功能介绍" class="headerlink" title="项目功能介绍"></a>项目功能介绍</h2><ul><li><p>登录功能：使用<a href="https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/" target="_blank" rel="noopener">GitHub第三方登录</a>，也可以表单注册登录（之后会加入<a href="https://wiki.connect.qq.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C_oauth2-0" target="_blank" rel="noopener">QQ第三方登录</a>）</p></li><li><p>提问：支持markdown语法</p></li><li><p>点赞、评论、二级评论</p></li><li><p>通知功能：点赞、评论或者二级评论后，会产生通知</p></li><li><p>热门标签：使用Spring Schedule定时任务，定时计算出标签的热度</p></li><li><p>相关问题：通过正则匹配标签，只要含有当前文章的其中一个标签，都会被列为相关问题</p><table><thead><tr><th>模式</th><th>模式匹配</th></tr></thead><tbody><tr><td>tag1 | tag2 | tag3</td><td>交替匹配任何模式tag1，tag2或tag3</td></tr></tbody></table></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学完Spring Boot的入门视频不久，想找一个项目练练手，就在B站上看到了码匠笔记的论坛项目教学。这就是一个不算复杂的练手项目，B站上跟着码匠笔记学习的，让我简单熟悉了Spring Boot的开发流程，，之后可能会添加一些新功能或集成一些新框架，加油吧~！</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven-解决新建spring boot项目导入jar包失败的问题</title>
      <link href="/2020/03/17/maven-bug%E4%BF%AE%E5%A4%8D/"/>
      <url>/2020/03/17/maven-bug%E4%BF%AE%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h3><ul><li><p>新建springboot项目时无法导入jar包</p></li><li><p>尝试在maven的settings文件中修改maven镜像–&gt;<strong>没用</strong></p></li><li><p>尝试更换maven版本–&gt;<strong>没用</strong></p></li><li><p>如何查看查看log日志发现是</p></li></ul><blockquote><p>java.lang.RuntimeException: sun.security.provider.certpath.SunCertPathBuilderException:<br>        unable to find valid certification path to requested target<br>        找不到请求目标的有效证书路径</p></blockquote><ul><li>此时就轮到度娘上场了</li></ul><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li><p>下载证书保存在本地，在jdk-&gt;jre-&gt;lib-&gt;security中打开命令行,输入以下命令将证书添加在java证书库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keytool <span class="literal">-import</span> <span class="literal">-alias</span> cacerts <span class="literal">-keystore</span> cacerts <span class="operator">-file</span> &lt;证书路径&gt;</span><br><span class="line"><span class="comment"># 默认密匙changeit</span></span><br></pre></td></tr></table></figure></li><li><p>此时打开idea发现还是下载失败</p></li><li><p>在idea中，打开项目路径下的命令行，执行命令让maven绕过校验服务器的证书</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="literal">-Dmaven</span>.wagon.http.ssl.insecure=true install</span><br></pre></td></tr></table></figure></li><li><p><strong>jar包导入成功！！！！！！</strong></p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>之前学习springboot入门的时候就遇到了这样的问题，当时在我室友帮忙下暂时解决了，可之后又冒了出来，后面我尝试的方法有：修改阿里云镜像，更换maven版本等等，都没用，搞的我差点就去学gradle了。这样的一个历史性难题，今天终于站起来解决了，爽！！！</p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+GitHub搭建我的博客</title>
      <link href="/2020/01/14/hexo-GitHub/"/>
      <url>/2020/01/14/hexo-GitHub/</url>
      
        <content type="html"><![CDATA[<hr><hr><!-- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). --><p><strong>首次尝试用GitHub+hexo搭建博客，大概步骤记录一下</strong> </p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a><strong>准备工作</strong></h3><h4 id="安装git和node-js"><a href="#安装git和node-js" class="headerlink" title="安装git和node.js"></a>安装git和node.js</h4><ul><li>git：进入<a href="https://git-scm.com/" target="_blank" rel="noopener">git官网下载</a></li><li>node.js：进入<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">node.js官网下载</a></li><li>通过以下命令查看是否安装好了git和node.js<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git -<span class="literal">-version</span> </span><br><span class="line">node <span class="literal">-v</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="在自己的磁盘中创建一个文件夹"><a href="#在自己的磁盘中创建一个文件夹" class="headerlink" title="在自己的磁盘中创建一个文件夹"></a>在自己的磁盘中创建一个文件夹</h4><p><img src="/" class="lazyload" data-src="/2020/01/14/hexo-GitHub/path.jpg"  alt="1"></p><p>进入该文件夹后，在路径上输入cmd回车，进入dos窗口输入以下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装hexo</span></span><br><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#安装hexo完成后，再执行下列命令，Hexo将会在指定文件夹中新建所需要的文件</span></span><br><span class="line">hexo init HoboClhBlog</span><br><span class="line">cd HoboClhBlog</span><br><span class="line">npm install</span><br><span class="line"><span class="comment">#输入命令部署在本地的5000端口</span></span><br><span class="line">hexo s <span class="literal">-p</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><p><strong>此时可以在在本地5000端口访问博客了</strong></p><h3 id="部署在GitHub上"><a href="#部署在GitHub上" class="headerlink" title="部署在GitHub上"></a><strong>部署在GitHub上</strong></h3><h4 id="在GitHub中新建仓库"><a href="#在GitHub中新建仓库" class="headerlink" title="在GitHub中新建仓库"></a>在GitHub中新建仓库</h4><p>进入<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>创建仓库，仓库名必须要遵守格式：账户名.github.io</p><h4 id="配置ssh-Key"><a href="#配置ssh-Key" class="headerlink" title="配置ssh Key"></a>配置ssh Key</h4><ul><li>执行以下命令全局配置一下本地账户：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">"github邮箱号"</span></span><br></pre></td></tr></table></figure></li><li>之后在C:\用户\用户名.ssh这个路径下会生成两个文件：id_rsa和id_rsa.pub</li><li>使用记事本打开复制id_rsa.pub，复制</li><li>打开GitHub–&gt;右上角头像–&gt;settings–&gt;SSH and GPG Keys</li><li>点击new SSH Key，将刚刚的内容粘贴</li><li>完毕</li></ul><h4 id="在博客根目录下的-config-yml-文件中修改以下"><a href="#在博客根目录下的-config-yml-文件中修改以下" class="headerlink" title="在博客根目录下的 _config.yml 文件中修改以下"></a>在博客根目录下的 _config.yml 文件中修改以下</h4><p><img src="/" class="lazyload" data-src="/2020/01/14/hexo-GitHub/config-1.png"  alt="config1"><br><img src="/" class="lazyload" data-src="/2020/01/14/hexo-GitHub/config-2.png"  alt="config2"></p><h4 id="安装部署插件、上传"><a href="#安装部署插件、上传" class="headerlink" title="安装部署插件、上传"></a>安装部署插件、上传</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer</span><span class="literal">-git</span> -<span class="literal">-save</span> <span class="comment">#安装插件</span></span><br><span class="line">hexo g <span class="comment">#生成静态文件</span></span><br><span class="line">hexo d <span class="comment">#上传至GitHub</span></span><br></pre></td></tr></table></figure><h4 id="完成使用-GitHub用户名-github-io即可进入博客"><a href="#完成使用-GitHub用户名-github-io即可进入博客" class="headerlink" title="完成使用 GitHub用户名.github.io即可进入博客"></a>完成使用 GitHub用户名.github.io即可进入博客</h4><h3 id="修改博客主题"><a href="#修改博客主题" class="headerlink" title="修改博客主题"></a><strong>修改博客主题</strong></h3><h4 id="先挑选一款"><a href="#先挑选一款" class="headerlink" title="先挑选一款"></a>先挑选一款</h4><p>进入<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo官网</a>挑选一款自己喜欢的，在GitHub上下载</p><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><ul><li>将下载的主题放在博客根目录下的themes文件夹中，</li><li>修改博客根目录下配置文件,修改成刚刚下载的主题名<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-meadow</span></span><br></pre></td></tr></table></figure><h4 id="重新部署至GitHub"><a href="#重新部署至GitHub" class="headerlink" title="重新部署至GitHub"></a>重新部署至GitHub</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo s <span class="literal">-p</span> <span class="number">5555</span> <span class="comment">#本地先预览</span></span><br><span class="line">hexo g  </span><br><span class="line">hexo d  <span class="comment">#上传</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2020/01/13/hello-world/"/>
      <url>/2020/01/13/hello-world/</url>
      
        <content type="html"><![CDATA[<!-- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). --><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
